import React, { useEffect, useState } from "react";
import { db, auth } from "../firebase";
import {
  collection,
  addDoc,
  query,
  onSnapshot,
  orderBy,
  serverTimestamp,
  deleteDoc,
  doc,
  getDocs,
} from "firebase/firestore";
import { FaSignOutAlt, FaTrashAlt } from "react-icons/fa";
import { useNavigate } from "react-router-dom";
import { getAuth } from "firebase/auth";



const ChatRoom = () => {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [users, setUsers] = useState([]);

  const navigate = useNavigate();

//   const auth = getAuth();
// const currentUser = auth.currentUser;

// console.log(currentUser.displayName); // यह null नहीं होना चाहिए

  // Send message
  const sendMessage = async (e) => {
    e.preventDefault();
    if (message.trim() === "") return;

    await addDoc(collection(db, "messages"), {
      text: message,
      createdAt: serverTimestamp(),
      uid: auth.currentUser.uid,
      displayName: auth.currentUser.displayName,
      isDeleted: false,
      logout: false,
    });

    setMessage("");
  };

  useEffect(() => {
    const q = query(collection(db, "messages"), orderBy("createdAt"));
    const unsubscribe = onSnapshot(q, (querySnapshot) => {
      const msgs = [];
      querySnapshot.forEach((doc) => {
        const msgData = doc.data();
        if (!msgData.isDeleted) {
          msgs.push({ id: doc.id, ...msgData });
        }
      });
      setMessages(msgs);
    });

    return () => unsubscribe();
  }, []);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const userSnapshot = await getDocs(collection(db, "users"));
        const userList = [];
        userSnapshot.forEach((doc) => {
          userList.push({ id: doc.id, ...doc.data() });
        });
        setUsers(userList);
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };
    fetchUsers();
  }, []);

  
  const deleteMessage = async (id) => {
    const msgRef = doc(db, "messages", id);
    await deleteDoc(msgRef);
  };


  const handleLogout = () => {
    const confirmLogout = window.confirm("Are you sure you want to logout?");
       
    if(confirmLogout){    auth.signOut();
      navigate("/");}
  };
   var CurrentUser=(auth.currentUser?.email,users,users?.find(item => item?.email === auth.currentUser?.email))
   console.log(users.displayName)
  
  return (
    <>
      <div className="flex h-screen">
        
        <div className="w-100 bg-[#1A2436] border-1 overflow-y-scroll">
          <div className="bg-[#1a2436] p-4 shadow-md flex items-center justify-between sticky top-0 z-10">
            <h2 className="text-xl text-white font-bold">Users</h2>
            
          </div>
          <div className="pt-2">
            {users.map((user) => (
              <div key={user.id} className="mb-2">
                <h1 className="text-white text-xl bg-gray-700 py-2 rounded-xl m-1 ps-2 flex items-center">
                  <span className="p-2 rounded-full px-4 bg-blue-500 me-4">
                    {user.displayName?.charAt(0) || "U"}
                  </span>
                  {user.displayName}
                </h1>
              </div>
            ))}
          </div>
        </div>


        <div className="h-screen w-full flex flex-col bg-[#131c2e] text-white ">
          
          <div className="bg-[#1a2436] p-4 shadow-md flex items-center justify-between">
            <h2 className="text-xl font-bold">Group Chat 💬</h2>
            <button
              onClick={handleLogout}
              className="bg-red-600 p-2 rounded-full text-white hover:bg-red-700"
            >
              <FaSignOutAlt />
            </button>
          </div>

     
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.map((msg) => ( 
              <div
                key={msg.id}
                className={`flex items-start ${
                  msg.uid === auth.currentUser.uid ? "justify-end" : "justify-start"
                }`}
              >
                {msg.uid !== auth.currentUser.uid && (
                  <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold mr-2">
                    {(msg.displayName?.charAt(0) || "U").toUpperCase()}
                  </div>
                )}

                <div
                  className={`max-w-xs md:max-w-md p-3 rounded-lg shadow-md ${
                    msg.uid === auth.currentUser.uid
                      ? "bg-[#2962ff] rounded-tl-lg rounded-bl-lg rounded-tr-lg"
                      : "bg-[#1a2436] rounded-tr-lg rounded-br-lg rounded-bl-lg"
                  }`}
                >
                  <div className="flex justify-between">
                    <div className="break-words pr-2">{msg.text}</div>
                    {msg.uid === auth.currentUser.uid && (
                      <button
                        onClick={() => deleteMessage(msg.id)}
                        className="text-gray-300 hover:text-red-300 text-xs ml-2"
                      >
                        <FaTrashAlt />
                      </button>
                    )}
                  </div>

                  <div className="flex justify-between text-xs text-gray-300 pt-1">
                    <span className="pe-1 text-[11px]">{msg.displayName}</span>
                    <span className="pe-1 text-[11px]">
                      {msg.createdAt?.seconds
                        ? new Date(msg.createdAt.seconds * 1000).toLocaleTimeString([], {
                            hour: "2-digit",
                            minute: "2-digit",
                          })
                        : ""}
                    </span>
                  </div>
                </div>

                {msg.uid === auth.currentUser.uid && (
                  <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold ml-2">
                    {(msg.displayName?.charAt(0) || "U").toUpperCase()}
                  </div>
                )}
              </div>
            ))}
          </div>

         
          <div className="p-4 bg-[#1a2436] border-t border-gray-700 relative">
            <form onSubmit={sendMessage} className="flex items-center gap-2">
              <input
                className="flex-1 p-3 rounded-full bg-[#131c2e] text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder="Type your message..."
              />
              <button
                type="button"
                onClick={() => setShowEmojiPicker((prev) => !prev)}
                className="p-3 rounded-full bg-[#131c2e] hover:bg-gray-600 text-white"
              >
                😊
              </button>
              <button
                type="submit"
                className="p-3 rounded-full bg-blue-600 hover:bg-blue-700 text-white"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-5 w-5"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path d="M10.894 2.553a1 1 0 00-1.788 0l-7 14a1 1 0 001.169 1.409l5-1.429A1 1 0 009 15.571V11a1 1 0 112 0v4.571a1 1 0 00.725.962l5 1.428a1 1 0 001.17-1.408l-7-14z" />
                </svg>
              </button>
            </form>

            {showEmojiPicker && (
              <div className="absolute bottom-20 right-16 bg-[#1a2436] p-3 rounded-lg shadow-lg border border-gray-700 grid grid-cols-6 gap-2 z-10">
                {["😊", "😂", "❤️", "👍", "🎉", "🔥", "😎", "🤔", "👀", "✨", "🙌", "👋"].map(
                  (emoji) => (
                    <span
                      key={emoji}
                      onClick={() => setMessage((prev) => prev + emoji)}
                      className="text-xl hover:bg-[#131c2e] p-1 rounded cursor-pointer"
                    >
                      {emoji}
                    </span>
                  )
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default ChatRoom;
