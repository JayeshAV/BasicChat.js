import React, { useEffect, useRef, useState } from "react";
import { db, auth } from "../firebase.js";
import {
  collection,
  addDoc,
  query,
  onSnapshot,
  orderBy,
  serverTimestamp,
  deleteDoc,
  doc,
  getDocs,
  updateDoc,
  where,
} from "firebase/firestore";
import { FaSignOutAlt, FaTrashAlt, FaSearch, FaTimes } from "react-icons/fa";
import { useNavigate } from "react-router-dom";

const ChatRoom = () => {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);
  const [users, setUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [showSearchInput, setShowSearchInput] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const messagesEndRef = useRef(null);
  const navigate = useNavigate();
  const privateChatCollectionName = "privateChats";

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  useEffect(() => {
    const fetchUsers = async () => {
      if (!auth.currentUser) return;

      try {
        const usersRef = collection(db, "users");
        const unsubUsers = onSnapshot(usersRef, (snapshot) => {
          const userList = [];
          snapshot.forEach((doc) => {
            const userData = doc.data();

            userList.push({
              id: doc.id,
              uid: userData.uid || doc.id,
              ...userData,
            });
          });
          console.log("Fetched users:", userList);
          setUsers(userList);
        });

        return unsubUsers;
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };

    const unsubscribeAuth = auth.onAuthStateChanged((user) => {
      if (user) {
        const unsubUsers = fetchUsers();
        return () => {
          if (unsubUsers) unsubUsers();
        };
      } else {
        navigate("/");
      }
    });

    return () => unsubscribeAuth();
  }, [navigate]);

useEffect(() => {
  if (!auth.currentUser || !selectedUser) return;

  const currentUserId = auth.currentUser.uid;
  const otherUserId = selectedUser.uid || selectedUser.id;

  const chatId = [currentUserId, otherUserId].sort().join("_");
  console.log("Listening for messages with chatId:", chatId); // <-- Log this!

  try {
    const messagesQuery = query(
      collection(db, privateChatCollectionName),
      where("chatId", "==", chatId),
      orderBy("createdAt", "asc")
    );

    const unsubscribe = onSnapshot(messagesQuery, (snapshot) => { // <-- Error likely here
      const fetchedMessages = [];
      snapshot.forEach((doc) => {
        const messageData = doc.data();
        fetchedMessages.push({ ...messageData, id: doc.id });
      });
      console.log("Fetched messages:", fetchedMessages);
      setMessages(fetchedMessages);
    });

    return () => unsubscribe();
  } catch (error) {
    console.error("Error setting up message listener:", error);
    alert("Error loading messages. Please try again.");
  }
}, [selectedUser]);

  const sendMessage = async (e) => {
    e.preventDefault();

    if (!auth.currentUser) {
      console.error("User not authenticated.");
      alert("Please log in to send a message.");
      navigate("/");
      return;
    }

    if (message.trim() === "") return;

    if (!selectedUser) {
      alert("Please select a user to chat with first");
      return;
    }

    try {
      const currentUserData = users.find(
        (user) =>
          user.uid === auth.currentUser?.uid ||
          user.email === auth.currentUser?.email
      );

      const displayName =
        currentUserData?.displayName ||
        auth.currentUser?.displayName ||
        auth.currentUser?.email?.split("@")[0] ||
        "Unknown User";

      const senderId = auth.currentUser.uid;
      const recipientUid = selectedUser.uid || selectedUser.id;

      if (!senderId || !recipientUid) {
        console.error("Invalid sender or recipient ID", {
          senderId,
          recipientUid,
        });
        alert("Error: Invalid user IDs. Please try again.");
        return;
      }

      const senderIdStr = String(senderId);
      const recipientUidStr = String(recipientUid);

      const participants = [String(senderId), String(recipientUid)];
      const chatId = [...participants].sort().join("_");

      const messageData = {
        text: message,
        createdAt: serverTimestamp(),
        uid: senderIdStr,
        email: auth.currentUser.email,
        displayName: displayName,
        isDeleted: false,
        recipientUid: recipientUidStr,
        recipientEmail: selectedUser.email,
        participants: participants,
        chatId: chatId,
      };

      console.log("Sending message with data:", messageData);

      const docRef = await addDoc(
        collection(db, privateChatCollectionName),
        messageData
      );
      console.log("Message successfully saved with ID:", docRef.id);

      setMessage("");
      setShowEmojiPicker(false);
    } catch (error) {
      console.error("Error sending message:", error);
      alert("Failed to send message: " + error.message);
    }
  };

  const deleteMessage = async (id) => {
    try {
      const confirmDelete = window.confirm(
        "Are you sure you want to delete this message?"
      );
      if (confirmDelete) {
        const msgRef = doc(db, privateChatCollectionName, id);
        await updateDoc(msgRef, {
          isDeleted: true,
          text: "This message was deleted",
        });
      }
    } catch (error) {
      console.error("Error deleting message:", error);
      alert("Failed to delete message: " + error.message);
    }
  };

  const handleLogout = () => {
    const confirmLogout = window.confirm("Are you sure you want to logout?");
    if (confirmLogout) {
      auth.signOut();
      navigate("/");
    }
  };

  const handleUserSelect = (user) => {
    if (user.uid === auth.currentUser?.uid) {
      alert("You cannot chat with yourself");
      return;
    }

    const selectedUserWithUid = {
      ...user,
      uid: user.uid || user.id,
    };

    console.log("Selected user:", selectedUserWithUid);
    setSelectedUser(selectedUserWithUid);
    setSearchQuery("");
    setShowSearchInput(false);
  };

  const currentUserDetails = auth.currentUser
    ? users.find(
        (user) =>
          user.uid === auth.currentUser?.uid ||
          user.email === auth.currentUser?.email ||
          user.id === auth.currentUser?.uid
      )
    : null;

  const getSenderDisplayName = (msg) => {
    if (msg.uid === auth.currentUser?.uid) {
      return "You";
    }
    const msgUser = users.find(
      (user) => user.uid === msg.uid || user.email === msg.email
    );
    if (msgUser?.displayName) {
      return msgUser.displayName;
    }
    return msg.displayName || msg.email?.split("@")[0] || "Unknown User";
  };

  const getSenderInitial = (msg) => {
    const name =
      msg.uid === auth.currentUser?.uid
        ? currentUserDetails?.displayName ||
          auth.currentUser?.displayName ||
          auth.currentUser?.email?.split("@")[0] ||
          "U"
        : users.find((user) => user.uid === msg.uid || user.email === msg.email)
            ?.displayName ||
          msg.displayName ||
          msg.email?.split("@")[0] ||
          "U";

    return name.charAt(0).toUpperCase();
  };

  const handleSearchBtn = () => {
    setShowSearchInput(!showSearchInput);
  };

  const handleClose = () => {
    setSearchQuery("");
    setShowSearchInput(false);
  };

  const filterUsers = users.filter(
    (user) =>
      user.uid !== auth.currentUser?.uid &&
      (user.displayName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.email?.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  const formatMessageTime = (timestamp) => {
    if (!timestamp?.seconds) return "";

    return new Date(timestamp.seconds * 1000).toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const addEmoji = (emoji) => {
    setMessage((prev) => prev + emoji);
  };

  return (
    <div className="flex h-screen bg-[#131c2e]">
      <div className="w-1/4 bg-[#1A2436] border-r border-gray-700 overflow-y-auto hidden md:block">
        <div className="bg-[#1a2436] p-4 shadow-md flex items-center justify-between sticky top-0 z-10">
          <h2 className="text-xl text-white font-bold">Users</h2>
          <button
            className="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-lg"
            onClick={handleSearchBtn}
          >
            <FaSearch />
          </button>
        </div>

        {showSearchInput && (
          <div className="p-4 border-b border-gray-700">
            <div className="flex items-center">
              <input
                type="text"
                placeholder="Search Users..."
                className="w-full p-2 bg-gray-700 text-white rounded-lg outline-none"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                autoFocus
              />
              <button
                onClick={handleClose}
                className="ml-2 text-gray-400 hover:text-white"
              >
                <FaTimes />
              </button>
            </div>
          </div>
        )}

        <div className="pt-2">
          {!showSearchInput && !searchQuery && (
            <div className="text-center text-gray-400 p-4">
              Search for users to start chatting
            </div>
          )}

          {(searchQuery || showSearchInput
            ? filterUsers
            : users.filter((u) => u.uid !== auth.currentUser?.uid)
          ).map((user) => (
            <div
              key={user.id || user.uid}
              className={`mb-2 cursor-pointer hover:bg-gray-800 ${
                selectedUser?.uid === user.uid
                  ? "border-l-4 border-blue-500 bg-gray-800"
                  : ""
              }`}
              onClick={() => handleUserSelect(user)}
            >
              <div className="text-white py-3 px-4 flex items-center">
                <span className="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold mr-3">
                  {(
                    user.displayName?.charAt(0) ||
                    user.email?.charAt(0) ||
                    "U"
                  ).toUpperCase()}
                </span>
                <span className="truncate">
                  {user.displayName ||
                    user.email?.split("@")[0] ||
                    "Unknown User"}
                </span>
              </div>
            </div>
          ))}

          {searchQuery && filterUsers.length === 0 && (
            <div className="text-center text-blue-300 p-4">
              No users found matching "{searchQuery}"
            </div>
          )}
        </div>
      </div>

      <div className="flex-1 flex flex-col text-white">
        <div className="bg-[#1a2436] p-4 shadow-md flex items-center justify-between">
          <h2 className="text-xl font-bold flex-1">
            {selectedUser ? (
              <div className="flex items-center">
                <span className="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold mr-3">
                  {(
                    selectedUser.displayName?.charAt(0) ||
                    selectedUser.email?.charAt(0) ||
                    "U"
                  ).toUpperCase()}
                </span>
                <span>
                  {selectedUser.displayName ||
                    selectedUser.email?.split("@")[0] ||
                    "Unknown User"}
                </span>
              </div>
            ) : (
              <div className="text-gray-300">
                Select a user to start chatting
                {currentUserDetails && (
                  <span className="text-sm ml-2 opacity-75">
                    (Logged in as:{" "}
                    {currentUserDetails.displayName ||
                      auth.currentUser?.displayName ||
                      auth.currentUser?.email?.split("@")[0]}
                    )
                  </span>
                )}
              </div>
            )}
          </h2>

          <div className="md:hidden mr-2">
            <button
              onClick={() => setShowSearchInput(!showSearchInput)}
              className="p-2 rounded-full bg-blue-600 hover:bg-blue-700"
            >
              <FaSearch className="h-5 w-5" />
            </button>
          </div>

          <button
            onClick={handleLogout}
            className="p-2 rounded-full hover:bg-red-500 hover:bg-opacity-20 text-white"
            title="Logout"
          >
            <FaSignOutAlt className="h-5 w-5" />
          </button>
        </div>

        {showSearchInput && (
          <div className="absolute top-0 left-0 right-0 bottom-0 bg-[#131c2e] z-20 md:hidden">
            <div className="p-4 bg-[#1a2436] flex justify-between items-center">
              <h2 className="text-xl font-bold">Select User</h2>
              <button onClick={handleClose} className="text-white">
                <FaTimes className="h-5 w-5" />
              </button>
            </div>

            <div className="p-4">
              <input
                type="text"
                placeholder="Search Users..."
                className="w-full p-3 bg-gray-700 text-white rounded-lg outline-none"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                autoFocus
              />
            </div>

            <div className="overflow-y-auto max-h-[calc(100vh-120px)]">
              {filterUsers.map((user) => (
                <div
                  key={user.id || user.uid}
                  className="p-4 border-b border-gray-700 cursor-pointer hover:bg-gray-800"
                  onClick={() => {
                    handleUserSelect(user);
                    setShowSearchInput(false);
                  }}
                >
                  <div className="flex items-center">
                    <span className="h-10 w-10 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold mr-3">
                      {(
                        user.displayName?.charAt(0) ||
                        user.email?.charAt(0) ||
                        "U"
                      ).toUpperCase()}
                    </span>
                    <span>
                      {user.displayName ||
                        user.email?.split("@")[0] ||
                        "Unknown User"}
                    </span>
                  </div>
                </div>
              ))}

              {searchQuery && filterUsers.length === 0 && (
                <div className="text-center text-blue-300 p-8">
                  No users found matching "{searchQuery}"
                </div>
              )}
            </div>
          </div>
        )}

        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {selectedUser ? (
            messages.length > 0 ? (
              messages.map((msg) => (
                <div
                  key={msg.id}
                  className={`flex items-start mb-4 ${
                    msg.uid === auth.currentUser?.uid
                      ? "justify-end"
                      : "justify-start"
                  }`}
                >
                  {msg.uid !== auth.currentUser?.uid && (
                    <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold mr-2 flex-shrink-0">
                      {getSenderInitial(msg)}
                    </div>
                  )}

                  <div
                    className={`max-w-[80%] sm:max-w-[70%] md:max-w-md p-3 rounded-lg shadow-md ${
                      msg.uid === auth.currentUser?.uid
                        ? "bg-[#2962ff] rounded-tl-lg rounded-bl-lg rounded-tr-lg"
                        : "bg-[#1a2436] rounded-tr-lg rounded-br-lg rounded-bl-lg"
                    }`}
                  >
                    <div className="flex justify-between items-start">
                      {msg.isDeleted ? (
                        <i className="text-gray-400 italic">
                          This message was deleted
                        </i>
                      ) : (
                        <p>{msg.text}</p>
                      )}

                      {msg.uid === auth.currentUser?.uid && !msg.isDeleted && (
                        <button
                          onClick={() => deleteMessage(msg.id)}
                          className="text-gray-300 hover:text-red-300 p-1"
                          title="Delete message"
                        >
                          <FaTrashAlt className="h-3 w-3" />
                        </button>
                      )}
                    </div>

                    <div className="flex justify-between text-xs text-gray-300 pt-1">
                      <span className="text-[11px] font-bold">
                        {getSenderDisplayName(msg)}
                      </span>
                      <span className="text-[11px]">
                        {formatMessageTime(msg.createdAt)}
                      </span>
                    </div>
                  </div>

                  {msg.uid === auth.currentUser?.uid && (
                    <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold ml-2 flex-shrink-0">
                      {getSenderInitial(msg)}
                    </div>
                  )}
                </div>
              ))
            ) : (
              <div className="text-center text-gray-400 mt-10">
                {`No messages yet with ${
                  selectedUser.displayName || selectedUser.email?.split("@")[0]
                }. Say hello!`}
              </div>
            )
          ) : (
            <div className="text-center text-gray-400 mt-10">
              Select a user to start chatting
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <div className="p-4 bg-[#1a2436] border-t border-gray-700 relative">
          <form onSubmit={sendMessage} className="flex items-center gap-2">
            <input
              className="flex-1 p-3 rounded-full bg-[#131c2e] text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder={
                selectedUser
                  ? `Message ${
                      selectedUser.displayName ||
                      selectedUser.email?.split("@")[0]
                    }...`
                  : "Select a user to start chatting..."
              }
              disabled={!selectedUser}
            />

            <button
              type="button"
              onClick={() => setShowEmojiPicker((prev) => !prev)}
              className="p-3 rounded-full bg-[#131c2e] hover:bg-gray-600 text-white"
              disabled={!selectedUser}
            >
              😊
            </button>

            <button
              type="submit"
              className="p-3 rounded-full bg-blue-600 hover:bg-blue-700 text-white flex items-center"
              disabled={!selectedUser || !message.trim()}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path d="M3.478 2.405a.75.75 0 00-.926.94l2.432 7.905H13.5a.75.75 0 010 1.5H4.984l-2.432 7.905a.75.75 0 00.926.94 60.519 60.519 0 0018.445-8.986.75.75 0 000-1.218A60.517 60.517 0 003.478 2.405z" />
              </svg>
            </button>
          </form>

          {showEmojiPicker && (
            <div className="absolute bottom-20 right-4 bg-[#1a2436] p-3 rounded-lg shadow-lg border border-gray-700 grid grid-cols-6 gap-2 z-10">
              {[
                "😊",
                "😂",
                "❤️",
                "👍",
                "🎉",
                "🔥",
                "😎",
                "🤔",
                "👀",
                "✨",
                "🙌",
                "👋",
                "😀",
                "🥰",
                "😍",
                "🤩",
                "😇",
                "😉",
              ].map((emoji) => (
                <span
                  key={emoji}
                  onClick={() => addEmoji(emoji)}
                  className="text-xl hover:bg-[#131c2e] p-1 rounded cursor-pointer"
                >
                  {emoji}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ChatRoom;
