import React, { useEffect, useRef, useState } from "react";
import { db, auth } from "../firebase.js";
import {
  collection,
  addDoc,
  query,
  onSnapshot,
  orderBy,
  serverTimestamp,
  deleteDoc,
  doc,
  getDocs,
  updateDoc,
  where,
} from "firebase/firestore";
import { FaSignOutAlt, FaTrashAlt, FaArrowLeft } from "react-icons/fa";
import { useNavigate } from "react-router-dom";

const ChatRoom = () => {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([]);
  const [users, setUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [showSearchInput, setShowSearchInput] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const messagesEndRef = useRef(null);
  const navigate = useNavigate();
  const privateChatCollectionName = "privateChats"; // Define collection name

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const sendMessage = async (e) => {
    e.preventDefault();
    if (!auth.currentUser) {
      console.error("User not authenticated.");
      alert("Please log in to send a message.");
      return;
    }
    if (message.trim() === "") return;
    if (!selectedUser) {
      alert("Please select a user to chat with first");
      return;
    }

    try {
      console.log("Current auth user:", auth.currentUser);
      console.log("Selected user for messaging:", selectedUser);

      const currentUserData = users.find(
        (user) => user.email === auth.currentUser?.email
      );
      console.log("Found current user data:", currentUserData);

      const displayName =
        currentUserData?.displayName ||
        auth.currentUser?.displayName ||
        auth.currentUser?.email?.split("@")[0] ||
        "Unknown User";

      const currentUid = auth.currentUser.uid;
      const recipientUid = selectedUser.uid || selectedUser.id;

      if (!currentUid) {
        console.error("Current user has no valid UID");
        alert(
          "Error: Your user account is missing an ID. Please try logging out and back in."
        );
        return;
      }

      if (!recipientUid) {
        console.error("Selected recipient has no valid UID:", selectedUser);
        alert(
          "Error: Selected recipient has no valid ID. Please try selecting another user."
        );
        return;
      }

      const messageData = {
        text: message,
        createdAt: serverTimestamp(),
        uid: currentUid,
        email: auth.currentUser.email,
        displayName: displayName,
        isDeleted: false,
        recipientUid: recipientUid,
        recipientEmail: selectedUser.email,
        participants: [currentUid, recipientUid],
      };

      console.log("Attempting to send message with data:", messageData);

      // Use the private chat collection
      const docRef = await addDoc(
        collection(db, privateChatCollectionName),
        messageData
      );
      console.log("Message sent successfully with ID:", docRef.id);

      setMessage("");
    } catch (error) {
      console.error("Error sending message:", error);
      alert("Failed to send message: " + error.message);
    }
  };

  useEffect(() => {
    if (!auth.currentUser || !selectedUser) return;

    // Use the private chat collection
    const messagesQuery = query(
      collection(db, privateChatCollectionName),
      where("participants", "array-contains", auth.currentUser.uid),
      orderBy("createdAt")
    );
    console.log(auth.currentUser.uid);

    const unsubscribe = onSnapshot(messagesQuery, (snapshot) => {
      const fetchedMessages = [];

      snapshot.forEach((doc) => {
        const msgData = doc.data();

        // ✅ Filter only messages between current user and selected user
        const isBetweenSelectedUsers =
          msgData.participants.includes(auth.currentUser.uid) &&
          msgData.participants.includes(selectedUser.uid || selectedUser.id);

        if (isBetweenSelectedUsers) {
          fetchedMessages.push({ ...msgData, id: doc.id });
        }
      });

      // Sort messages by createdAt
      fetchedMessages.sort((a, b) => {
        const timeA = a.createdAt?.seconds || 0;
        const timeB = b.createdAt?.seconds || 0;
        return timeA - timeB;
      });

      setMessages(fetchedMessages);
    });

    return () => unsubscribe();
  }, [auth.currentUser, selectedUser]);

  const debugFirestore = async () => {
    try {
      // Debug both collections
      const allMessages = await getDocs(collection(db, "messages"));
      console.log("Total messages in 'messages' collection:", allMessages.size);
      allMessages.forEach((doc) => {
        console.log("Message (messages):", doc.id, doc.data());
      });

      const allPrivateMessages = await getDocs(
        collection(db, privateChatCollectionName)
      );
      console.log(
        "Total messages in 'privateChats' collection:",
        allPrivateMessages.size
      );
      allPrivateMessages.forEach((doc) => {
        console.log("Message (privateChats):", doc.id, doc.data());
      });

      console.log("Current user:", auth.currentUser?.uid);
      console.log("Selected user:", selectedUser);
    } catch (error) {
      console.error("Debug error:", error);
    }
  };

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const userSnapshot = await getDocs(collection(db, "users"));
        const userList = [];
        userSnapshot.forEach((doc) => {
          const userData = doc.data();
          userList.push({
            id: doc.id,
            uid: userData.uid || doc.id,
            ...userData,
          });
        });
        console.log("Fetched users:", userList);
        setUsers(userList);
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };
    fetchUsers();
  }, []);

  const deleteMessage = async (id) => {
    try {
      // Use the private chat collection
      const msgRef = doc(db, privateChatCollectionName, id);
      const confirmDelete = window.confirm(
        "Are you sure you want to delete this message?"
      );
      if (confirmDelete) {
        await updateDoc(msgRef, {
          isDeleted: true,
        });
      }
    } catch (error) {
      console.error("Error deleting message:", error);
    }
  };

  const handleLogout = () => {
    const confirmLogout = window.confirm("Are you sure you want to logout?");
    if (confirmLogout) {
      auth.signOut();
      navigate("/");
    }
  };

  const handleUserSelect = (user) => {
    if (user.uid === auth.currentUser?.uid) {
      return;
    }
    const selectedUserWithUid = {
      ...user,
      uid: user.uid || user.id,
    };
    console.log("Selected user with uid:", selectedUserWithUid);
    setSelectedUser(selectedUserWithUid);
    setSearchQuery("");
    setShowSearchInput(false);
  };

  const currentUserDetails = users.find(
    (user) => user.email === auth?.currentUser?.email
  );

  const getSenderDisplayName = (msg) => {
    if (msg.uid === auth.currentUser?.uid) {
      return "You";
    }
    const msgUser = users.find(
      (user) => user.uid === msg.uid || user.email === msg.email
    );
    if (msgUser?.displayName) {
      return msgUser.displayName;
    }
    return msg.displayName || msg.email?.split("@")[0] || "Unknown User";
  };

  const getSenderInitial = (msg) => {
    if (msg.uid !== auth.currentUser?.uid) {
      const msgUser = users.find(
        (user) => user.uid === msg.uid || user.email === msg.email
      );
      if (msgUser?.displayName) {
        return (msgUser.displayName.charAt(0) || "U").toUpperCase();
      }
      return (msg.displayName?.charAt(0) || "U").toUpperCase();
    }
    const currentName =
      currentUserDetails?.displayName ||
      auth.currentUser?.displayName ||
      auth.currentUser?.email?.split("@")[0] ||
      "U";
    return currentName.charAt(0).toUpperCase();
  };

  const handleSearchBtn = () => {
    setShowSearchInput(!showSearchInput);
  };

  const handleClose = () => {
    setSearchQuery("");
    setShowSearchInput(false);
  };

  const filterUsers = users.filter(
    (user) =>
      user.displayName?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      user.email?.split("@")[0].toLowerCase().includes(searchQuery.toLowerCase())
  );

  return (
    <>
      <div className="flex h-screen">
        <div className="w-full md:w-64 bg-[#1A2436] border-r border-gray-700 overflow-y-auto sm:hidden hidden xl:block">
          <div className="bg-[#1a2436] p-4 shadow-md flex items-center justify-between sticky top-0 z-10">
            <h2 className="text-xl text-white font-bold">Users</h2>
            <button
              className="bg-blue-500 text-white p-2 rounded-lg"
              onClick={handleSearchBtn}
            >
              Search
            </button>
          </div>
          {showSearchInput && (
            <div className="p-4">
              <div className="flex">
                <input
                  type="text"
                  placeholder="Search Users..."
                  className="w-full p-2 bg-gray-700 text-white rounded-lg outline-none"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                />
                <button onClick={handleClose} className="ms-2">
                  <i className="fa-solid fa-xmark text-gray-200 text-xl"></i>
                </button>
              </div>
            </div>
          )}
          <div className="pt-2">
            {!searchQuery && (
              <div className="text-center text-gray-400 p-4">
                Search for users to start chatting
              </div>
            )}
            {searchQuery
              ? filterUsers.length > 0
                ? filterUsers
                    .filter((user) => user.uid !== auth.currentUser?.uid)
                    .map((user) => (
                      <div
                        key={user.id}
                        className={`mb-2 cursor-pointer ${
                          selectedUser?.uid === user.uid
                            ? "border-l-4 border-blue-500"
                            : ""
                        }`}
                        onClick={() => handleUserSelect(user)}
                      >
                        <h1 className="text-white text-xl bg-gray-700 py-2 rounded-xl m-1 ps-2 flex items-center">
                          <span className="p-2 rounded-full px-4 bg-blue-500 me-4">
                            {(
                              user.displayName?.charAt(0) ||
                              user.email?.charAt(0) ||
                              "U"
                            ).toUpperCase()}
                          </span>
                          {user.displayName ||
                            user.email?.split("@")[0] ||
                            "Unknown User"}
                        </h1>
                      </div>
                    ))
                : <h1 className="text-center text-blue-300">User Not Found!</h1>
              : null}
          </div>
        </div>
        <div className="flex-1 flex flex-col bg-[#131c2e] text-white">
          <div className="bg-[#1a2436] p-[22px] shadow-md flex items-center justify-between">
            <h2 className="text-xl font-bold flex-1">
              {selectedUser ? (
                <div className="flex items-center">
                  <span className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold mr-2">
                    {(
                      selectedUser.displayName?.charAt(0) ||
                      selectedUser.email?.charAt(0) ||
                      "U"
                    ).toUpperCase()}
                  </span>
                  <span>
                    {selectedUser.displayName ||
                      selectedUser.email?.split("@")[0] ||
                      "Unknown User"}
                  </span>
                </div>
              ) : (
                <>
                  Select a user to start chatting{" "}
                  {currentUserDetails
                    ? `(Logged in as: ${
                        currentUserDetails.displayName ||
                        auth.currentUser?.displayName ||
                        "Unknown"
                      })`
                    : ""}
                </>
              )}
            </h2>
            <button
              onClick={handleLogout}
              className="rounded-full text-white hover:text-red-400"
            >
              <FaSignOutAlt className="h-5 w-5" />
            </button>
          </div>
          <div className="flex-1 overflow-y-auto p-4 space-y-4 scroll-mt-20">
            {selectedUser ? (
              messages.length > 0 ? (
                messages.map((msg) => {
                  console.log("Rendering message:", msg);
                  return (
                    <div
                      key={msg.id}
                      className={`flex items-start ${
                        msg.uid === auth.currentUser?.uid
                          ? "justify-end"
                          : "justify-start"
                      }`}
                    >
                      {msg.uid !== auth.currentUser?.uid && (
                        <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold mr-2">
                          {getSenderInitial(msg)}
                        </div>
                      )}
                      <div
                        className={`max-w-[80%] sm:max-w-[70%] md:max-w-md p-3 rounded-lg shadow-md ${
                          msg.uid === auth.currentUser?.uid
                            ? "bg-[#2962ff] rounded-tl-lg rounded-bl-lg rounded-tr-lg"
                            : "bg-[#1a2436] rounded-tr-lg rounded-br-lg rounded-bl-lg"
                        }`}
                      >
                        <div className="flex justify-between items-start">
                          {msg.isDeleted ? (
                            <i className="text-gray-400 italic">
                              This message was deleted
                            </i>
                          ) : (
                            <div
                              className="break-words pr-2"
                              key={`message-content-${msg.id}`}
                            >
                              {msg.text}
                            </div>
                          )}
                          {msg.uid === auth.currentUser?.uid && (
                            <button
                              onClick={() => deleteMessage(msg.id)}
                              className="text-gray-300 hover:text-red-300 text-xs p-0 min-h-0 h-auto"
                            >
                              <FaTrashAlt className="h-4 w-4" />
                            </button>
                          )}
                        </div>
                        <div className="flex justify-between text-xs text-gray-300 pt-1">
                          <span className="pe-1 text-[11px] font-bold">
                            {getSenderDisplayName(msg)}
                          </span>
                          <span className="pe-1 text-[11px]">
                            {msg.createdAt?.seconds
                              ? new Date(
                                  msg.createdAt.seconds * 1000
                                ).toLocaleTimeString([], {
                                  hour: "2-digit",
                                  minute: "2-digit",
                                })
                              : ""}
                          </span>
                        </div>
                      </div>
                      {msg.uid === auth.currentUser?.uid && (
                        <div className="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center text-white font-bold ml-2">
                          {getSenderInitial(msg)}
                        </div>
                      )}
                    </div>
                  );
                })
              ) : (
                <div className="text-center text-gray-400 mt-10">
                  {`No messages yet with ${
                    selectedUser.displayName ||
                    selectedUser.email?.split("@")[0]
                  }. Say hello!`}
                </div>
              )
            ) : (
              <div className="text-center text-gray-400 mt-10">
                Select a user from the sidebar to start chatting
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>
          <div className="p-4 bg-[#1a2436] border-t border-gray-700 relative">
            <form
              onSubmit={sendMessage}
              className="flex flex-wrap md:flex-nowrap items-center gap-2"
            >
              <input
                className="flex-1 p-3 rounded-full bg-[#131c2e] text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 min-w-[150px]"
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                placeholder={
                  selectedUser
                    ? `Message ${
                        selectedUser.displayName ||
                        selectedUser.email?.split("@")[0]
                      }...`
                    : "Select a user to start chatting..."
                }
                disabled={!selectedUser}
              />
              <div className="flex gap-2">
                <button
                  type="button"
                  onClick={() => setShowEmojiPicker((prev) => !prev)}
                  className="p-3 rounded-full bg-[#131c2e] hover:bg-gray-600 text-white"
                  disabled={!selectedUser}
                >
                  😊
                </button>
                <button
                  type="submit"
                  className="p-3 rounded-full bg-blue-600 hover:bg-blue-700 text-white flex items-center"
                  disabled={!selectedUser}
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="h-5 w-5"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                  >
                    <path d="M3.478 2.405a.75.75 0 00-.926.94l2.432 7.905H13.5a.75.75 0 010 1.5H4.984l-2.432 7.905a.75.75 0 00.926.94 60.519 60.519 0 0018.445-8.986.75.75 0 000-1.218A60.517 60.517 0 003.478 2.405z" />
                  </svg>
                </button>
              </div>
            </form>
            {showEmojiPicker && (
              <div className="absolute bottom-20 right-16 bg-[#1a2436] p-3 rounded-lg shadow-lg border border-gray-700 grid grid-cols-6 gap-2 z-10">
                {[
                  "😊",
                  "😂",
                  "❤️",
                  "👍",
                  "🎉",
                  "🔥",
                  "😎",
                  "🤔",
                  "👀",
                  "✨",
                  "🙌",
                  "👋",
                ].map((emoji) => (
                  <span
                    key={emoji}
                    onClick={() => setMessage((prev) => prev + emoji)}
                    className="text-xl hover:bg-[#131c2e] p-1 rounded cursor-pointer"
                  >
                    {emoji}
                  </span>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};
export default ChatRoom;

